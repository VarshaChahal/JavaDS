Merge Sort: 
Split the array down to individual element, compare and merge those elements(merging here includes merging by sorting them)

It's useful to implement the helper function first which will merge the two sorted arrays. Given two arrays which are sorted,
this helper function should create a new array which is also sorted and consists of all the elements in the two sorted arrays passed to it.
This function should run in O(n+m) time and use O(n+m) space and should not modify the parameters passed to it.

Time Complexity:
    Best: O(nlogn)
    Avg: O(nlogn)
    Worst: O(nlogn)

O(logn) is the number of decompositions
O(n) is the number of comparisons

If you have  an array of 8 items, it is gonna take you 3 recursive calls to split it into 8 individual items => log(pow(2,3)) => 3 rec calls
If you have an array of 32 items, it is gonna take you 5 recursive calls to split it into 32 individual items => log(pow(2,5)) => 5 rec calls
Hence log(n).
'n' for the number of comparisons. In the end, you do as many comparisons as the number of elements in the array. Look at the helper function.

Therefore the overall time complexity is O(nlogn).

Space Complexity: O(n)


Quick Sort:
Uses the fact that 0 or 1 elements in an array are always sorted.
Select one element as the pivot, all the elements smaller than pivot are moved to the left side and all the elements greater than the pivot are moved to the right side of pivot.
Once the pivot is positioned appropriately, quick sort can be applied on the either side of the array.


Choice of pivot affects the runtime of quicksort